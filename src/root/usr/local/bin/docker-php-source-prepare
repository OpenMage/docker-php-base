#!/usr/bin/env bash

set -o errexit  # Exit script when a command exits with non-zero status
set -o errtrace # Exit on error inside any functions or sub-shells
set -o nounset  # Exit script on use of an undefined variable
set -o pipefail # Return exit status of the last command in the pipe that failed
set -x

readonly EX_OK=0                # Successful termination
readonly EX_UNKNOWN=1           # Unknown error occurred


display_error_message() {
  local status=${1}
  local exitcode=${2:-0}

  echo >&2
  echo " !     ERROR: ${status}"
  echo >&2

  if [[ ${exitcode} -ne 0 ]]; then
    exit "${exitcode}"
  fi
}

# ------------------------------------------------------------------------------
# Displays a notice
#
# Arguments:
#   $* Notice message to display
# Returns:
#   Exit code
# ------------------------------------------------------------------------------
display_notice_message() {
  local status=$*

  echo
  echo "NOTICE: ${status}"
  echo
}

# ------------------------------------------------------------------------------
# Displays a status message
#
# Arguments:
#   $* Status message to display
# Returns:
#   Exit code
# ------------------------------------------------------------------------------
display_status_message() {
  local status=$*

  echo "-----> ${status}"
}

if [[ "${PHP_VERSION}" =~ ^([0-9]+).(([0-9]+)(.([0-9]+))?)(-(rc[0-9]+))?(-([0-9a-z_]+))?$ ]]; then
        majorVersion=${BASH_REMATCH[1]}
        minorVersion=${BASH_REMATCH[3]}
        mainlineVersion="${BASH_REMATCH[1]}.${BASH_REMATCH[3]}"
        patchVersion=${BASH_REMATCH[5]}
        rcVersion=$(echo "${BASH_REMATCH[7]}" | tr '[a-z]' '[A-Z]')
        type=$(echo "${BASH_REMATCH[9]}" | tr '[A-Z]' '[a-z]')
        targetFolder="${majorVersion}.${minorVersion}"
        sourceFolder="${majorVersion}.${minorVersion}"
        echo "######################## current image ########################"
        echo "Version:                  ${PHP_VERSION%%-*}"
        echo "Major Version:            ${majorVersion}"
        echo "Minor Version:            ${minorVersion}"
        if [[ -z "${rcVersion}" ]]; then
            phpApiUrl="https://secure.php.net/releases/index.php?json&max=100&version=${PHP_VERSION%%-*}"
            ## recover / workaround dot maybe
            phpApiJqExpr='
                (keys[] | select(startswith("'"${PHP_VERSION%%-*}"'"))) as $version
                | [ $version, (
                    .[$version].source[]
                    | select(.filename | endswith(".tar.gz"))
                    |
                        "https://secure.php.net/get/" + .filename + "/from/this/mirror",
                        .sha256 // ""
                ) ]
            '
        else
		    phpApiUrl='https://qa.php.net/api.php?type=qa-releases&format=json'
		    phpApiJqExpr='
    			.releases[]
	    		| select(.version | startswith("'"${PHP_VERSION%%-*}"'"))
		    	| [
			    	.version,
				    .files.gz.path // "",
				    .files.gz.sha256 // ""
			    ]
		    '
        fi
        IFS=$'\n'
        releases=( $(curl -fsSL "${phpApiUrl}" | jq --raw-output "${phpApiJqExpr} | @sh" | sort -rV ) )
        unset IFS
        if [ "${#releases[@]}" -eq 0 ]; then
            display_error_message "Unable to determine available releases of ${PHP_VERSION}" "${EX_UNKNOWN}"
        fi
        eval "possi=( ${releases[0]} )"
        phpDownloadFullVersion="${possi[0]}"
	    phpDownloadUrl="${possi[1]}"
	    phpDownloadSha256="${possi[2]}"
        echo "PHP Download URL:         ${phpDownloadUrl}"
        echo "PHP Download Sha256:      ${phpDownloadSha256}"
        echo "PHP Download Version:     ${phpDownloadFullVersion}"
        sed -ri \
        -e 's/([\s]+)?PHP_URL="(.*)"/\1PHP_URL="'"${phpDownloadUrl//\//\\/}"'"/' \
        -e 's/([\s]+)?PHP_SHA256="([a-z0-9]+)"/\1PHP_SHA256="'"${phpDownloadSha256}"'"/' \
        /etc/php-src

fi